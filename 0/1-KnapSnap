// 0/1 knapsack prblm
class Solution {
    static Integer[][] dp;
    static int find(int W,int val[],int wt[],int idx,int w){
        if(idx>=wt.length) return 0;
        if(dp[idx][w]!=null) return dp[idx][w];
        int chosen =0,notChosen =0;
        if(wt[idx]+w<=W){
            chosen = find(W,val,wt,idx+1,w+wt[idx])+val[idx];
        } 
        notChosen = find(W,val,wt,idx+1,w);
        return dp[idx][w]= Math.max(chosen,notChosen);
    }
    static int knapsack(int W, int val[], int wt[]) {
       // int sum = Arrays.stream(wt).sum();
        dp = new Integer[wt.length][W+1];  // W+1 bcz the net weight in recusrion will not exceed W+1
       return find(W,val,wt,0,0);
    }
}
