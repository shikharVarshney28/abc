class Solution {
    // Integer dp[][];

    int dp[][];

    // int find(String s, String t, int i, int j) {
    //     if (i < 0 || j < 0)
    //         return 0;
    //         if(dp[i][j]!=null) return dp[i][j];
    //     if (s.charAt(i) == t.charAt(j))
    //         return dp[i][j]=find(s, t, i - 1, j - 1) + 1;
    //     return dp[i][j]=Math.max(find(s, t, i - 1, j), find(s, t, i, j - 1));
    // }

    public int longestCommonSubsequence(String text1, String text2) {
        // dp=new Integer[text1.length()][text2.length()];
        dp=new int[text1.length()+1][text2.length()+1];
        return topDown(text1,text2);
        // return find(text1, text2, text1.length() - 1, text2.length() - 1);
    }
    int topDown(String s,String t){
        for(int i=1;i<=s.length();i++){
            for(int j=1;j<=t.length();j++){
                if(s.charAt(i-1) == t.charAt(j-1)) dp[i][j] =dp[i-1][j-1]+ 1;
                else dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
            }
        }
        //to print 
        StringBuilder ans =new StringBuilder();
        int i =s.length(),j=t.length();
        while(i-1>=0 && j-1>=0){
            if(s.charAt(i-1) == t.charAt(j-1)){ //since i-1 becomes > then j-1 so we do i--
                ans.append(s.charAt(i-1));
                i--;j--;
            }else if (dp[i-1][j]>dp[i][j-1]){ 
                i--;
            } else j--;  // since j-1 > i-1 so we do j--
        }
        ans.reverse();
        System.out.print(ans);
        return dp[dp.length-1][dp[0].length-1];
    }
}
